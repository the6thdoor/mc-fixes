plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	
	runtime('net.fabricmc:sponge-mixin:0.8+build.18') {
		force = true
	}
	
	modRuntime 'ocd:mc-fix_mc-169913'
	include 'ocd:mc-fix_mc-169913'
	
	modRuntime 'ocd:mc-fix_mc-170012'
	include 'ocd:mc-fix_mc-170012'

	modRuntime 'ocd:mc-fix_mc-170010'
	include 'ocd:mc-fix_mc-170010'

	modRuntime 'ocd:mc-fix_mc-196542'
	include 'ocd:mc-fix_mc-196542'
	
	modRuntime 'ocd:mc-fix_mc-196725'
	include 'ocd:mc-fix_mc-196725'
	
	modRuntime 'ocd:mc-fix_mc-197524'
	include 'ocd:mc-fix_mc-197524'
}

task setup {
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

def modOutConf(Configuration conf, ConfigurationContainer confContainer = configurations)
{
	return confContainer.create("mod${conf.name.capitalize()}") {
		attributes {
			conf.attributes.keySet().each { a -> attribute(a, conf.attributes.getAttribute(a)) }
		}

		canBeConsumed = true
		canBeResolved = false

		conf.canBeConsumed = false
	}
}

def copyDependencies(Configuration src, Configuration dst) {
	dst.dependencies.addAll src.dependencies
	dst.dependencyConstraints.addAll src.dependencyConstraints

	src.excludeRules.each {
		dst.exclude([group: it.group, module: it.module])
	}
}

configurations {
	modOutConf(apiElements)
	modOutConf(runtimeElements)

	modApiElements {
		extendsFrom modApi
	}

	modRuntimeElements {
		extendsFrom modApi, modImplementation, modCompile, modRuntime
	}

	copyDependencies(implementation, modRuntimeElements)
	copyDependencies(compile, modRuntimeElements)
	copyDependencies(runtime, modRuntimeElements)
	copyDependencies(runtimeOnly, modRuntimeElements)
}

artifacts {
	modApiElements remapJar
	modRuntimeElements remapJar
}

configurations {
	modApiElements.outgoing.variants {
		sources {
			artifact(tasks.sourcesJar.archiveFile.get()) {
				builtBy remapSourcesJar
			}

			attributes {
				attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
				attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, DocsType.SOURCES))
			}
		}
	}
}

jar {
	from "LICENSE"
}
